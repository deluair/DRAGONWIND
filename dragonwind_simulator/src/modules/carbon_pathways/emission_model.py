from src.core.base_component import SimulationComponent
from src.config.loader import load_config

class CarbonPathways(SimulationComponent):
    """
    Models the carbon emission pathways and reduction scenarios.

    This component tracks CO2 emissions from the power sector and calculates
    the emissions avoided due to the growth of renewable energy.
    """

    def __init__(self, name: str = "Carbon Pathways"):
        super().__init__(name)
        self.renewable_capacity_module = None

    def initialize(self):
        """
        Initializes the component's state.
        - Set up baseline fossil fuel generation and emission factors.
        """
        print(f"Initializing {self.name} component...", flush=True)
        try:
            self.renewable_capacity_module = next(
                comp for comp in self.simulation_engine.components 
                if comp.name == "Renewable Capacity Expansion"
            )
        except StopIteration:
            raise RuntimeError("Renewable Capacity Expansion module not found.")

        # Baseline fossil fuel generation in TWh (Terawatt-hours)
        cfg = load_config()
        # Baseline fossil fuel generation in TWh
        self.fossil_generation_twh = cfg['carbon']['fossil_generation_twh']
        # Emission factor in tons CO2 per MWh
        self.emission_factor = cfg['carbon']['emission_factor_tco2_per_mwh']
        # Capacity factor for renewable energy
        self.renewable_capacity_factor = cfg['carbon']['renewable_capacity_factor']

        self.total_emissions_avoided = 0
        self.history = []

        print(f"Baseline Fossil Fuel Generation: {self.fossil_generation_twh} TWh", flush=True)
        print(f"Emission Factor: {self.emission_factor} tCO2/MWh", flush=True)

    def step(self, time_step: int):
        """
        Executes one simulation step for the given year.
        - Calculate emissions from fossil fuels.
        - Calculate emissions avoided by new renewable capacity.

        Args:
            time_step (int): The current simulation year.
        """
        print(f"Executing {self.name} step for year {time_step}...", flush=True)
        # Get the total renewable capacity from the capacity expansion module
        total_renewable_capacity_gw = self.renewable_capacity_module.get_total_capacity()

        # Calculate the energy generated by this capacity in a year (in TWh)
        # GW * 8760 hours/year * capacity_factor / 1000 GW/TW = TWh
        renewable_generation_twh = total_renewable_capacity_gw * 8760 * self.renewable_capacity_factor / 1000

        # Calculate the CO2 emissions that would have been produced by this energy
        # TWh * 1,000,000 MWh/TWh * tCO2/MWh = tons CO2
        emissions_avoided_this_year = renewable_generation_twh * 1e6 * self.emission_factor
        self.total_emissions_avoided += emissions_avoided_this_year

        # Calculate current emissions from remaining fossil generation
        current_fossil_generation = max(0, self.fossil_generation_twh - renewable_generation_twh)
        current_emissions = current_fossil_generation * 1e6 * self.emission_factor

        # record metrics
        self.history.append({
            'year': time_step,
            'renewable_generation_twh': renewable_generation_twh,
            'current_emissions_tons': current_emissions,
            'emissions_avoided_tons': self.total_emissions_avoided
        })

        print(f"  - Renewable Generation: {renewable_generation_twh:.2f} TWh", flush=True)
        print(f"  - Current Power Sector Emissions: {current_emissions / 1e9:.2f} Billion tons CO2", flush=True)
        print(f"  - Emissions Avoided This Year: {emissions_avoided_this_year / 1e6:.2f} Million tons CO2", flush=True)

    def finalize(self):
        """
        Finalizes the component's state.
        """
        print(f"Finalizing {self.name} component...", flush=True)
        print(f"Total Cumulative Emissions Avoided: {self.total_emissions_avoided / 1e9:.2f} Billion tons CO2", flush=True)

    def get_results(self):
        """Return DataFrame of yearly emissions information."""
        try:
            import pandas as pd
        except ImportError:
            raise RuntimeError("pandas required for get_results")
        return pd.DataFrame(self.history)
